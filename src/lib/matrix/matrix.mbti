package kcn-judu/calculus-numerical/lib/matrix

alias @kcn-judu/calculus-numerical/lib/vector as @vector

// Values

// Types and methods
pub(all) struct MatrixDbl {
  data : Array[Double]
  col : Int
  row : Int
  stride : Int
}
impl MatrixDbl {
  add_constant(Self, Double) -> Self
  add_constant_inplace(Self, Double) -> Unit
  add_diagonal(Self, Double) -> Self
  add_diagonal_inplace(Self, Double) -> Unit
  at(Self, Int, Int) -> Double
  col_vec(Self, Int) -> @vector.VectorDbl
  diagonal_vec(Self) -> @vector.VectorDbl
  div_elements(Self, Self) -> Self
  div_elements_inplace(Self, Self) -> Unit
  filled_matrix(Int, Int, Double) -> Self
  map(Self, (Double) -> Double) -> Self
  map_inplace(Self, (Double) -> Double) -> Unit
  mul_elements(Self, Self) -> Self
  mul_elements_inplace(Self, Self) -> Unit
  new(Int, Int, stride~ : Int = ..) -> Self
  op_add(Self, Self) -> Self
  op_as_view(Self, Int, ViewMode) -> MatrixViewDbl
  op_mul(Self, Self) -> Self
  op_sub(Self, Self) -> Self
  row_vec(Self, Int) -> @vector.VectorDbl
  scale(Self, Double) -> Self
  scale_inplace(Self, Double) -> Unit
  subcol_vec(Self, Int, Int, Int) -> @vector.VectorDbl
  subdiagonal_vec(Self) -> @vector.VectorDbl
  subrow_vec(Self, Int, Int, Int) -> @vector.VectorDbl
  superdiagonal_vec(Self) -> @vector.VectorDbl
  view(Self, Int, start~ : Int = .., num~ : Int = .., ViewMode) -> MatrixViewDbl
  zero_matrix(Int, Int) -> Self
}
impl Show for MatrixDbl

pub(all) struct MatrixViewDbl {
  matrix : MatrixDbl
  index : Int
  start : Int
  num : Int
  view_mode : ViewMode
}

pub enum ViewMode {
  Row
  Col
  Diagonal
  SubDiagonal
  SuperDiagonal
  SubRow
  SubCol
}
impl Eq for ViewMode
impl Show for ViewMode

// Type aliases

// Traits

